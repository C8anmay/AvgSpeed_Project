import java.util.Scanner;
import java.util.*;

public class Calculator {
	
	private static final int LEFT_ASSOC = 0;
	private static final int RIGHT_ASSOC = 1;


	private static final Map<String, int[]> OPERATORS = new HashMap<String, int[]>();
	static {
		// Map<"token", []{precendence, associativity}>
		OPERATORS.put("+", new int[] { 0, LEFT_ASSOC });
		OPERATORS.put("-", new int[] { 0, LEFT_ASSOC });
		OPERATORS.put("*", new int[] { 5, LEFT_ASSOC });
		OPERATORS.put("/", new int[] { 5, LEFT_ASSOC });
		OPERATORS.put("^", new int[] { 5, LEFT_ASSOC });

	}

	
	private static boolean isOperator(String token) {
		return OPERATORS.containsKey(token);
	}

	
	private static boolean isAssociative(String token, int type) {
		if (!isOperator(token)) {
			throw new IllegalArgumentException("Invalid token: " + token);
		}

		if (OPERATORS.get(token)[1] == type) {
			return true;
		}
		return false;
	}


	private static final int cmpPrecedence(String token1, String token2) {
		if (!isOperator(token1) || !isOperator(token2)) {
			throw new IllegalArgumentException("Invalid tokens: " + token1 + " " + token2);
		}
		return OPERATORS.get(token1)[0] - OPERATORS.get(token2)[0];
	}

	
	public static String[] infixToRPN(String[] inputTokens) {
		ArrayList<String> out = new ArrayList<String>();
		Stack<String> stack = new Stack<String>();


		for (String token : inputTokens) {

			if (isOperator(token)) {
				
				while (!stack.empty() && isOperator(stack.peek())) {
					if ((isAssociative(token, LEFT_ASSOC) && cmpPrecedence(token, stack.peek()) <= 0)
							|| (isAssociative(token, RIGHT_ASSOC) && cmpPrecedence(token, stack.peek()) < 0)) {
						out.add(stack.pop());
						continue;
					}
					break;
				}
				
				stack.push(token);
			}
			
			else if (token.equals("(")) {
				stack.push(token); //
			}
			
			else if (token.equals(")")) {
				while (!stack.empty() && !stack.peek().equals("(")) {
					out.add(stack.pop());
				}
				stack.pop();
			}
			
			else {
				out.add(token);
			}
		}
		while (!stack.empty()) {
			out.add(stack.pop());
		}
		String[] output = new String[out.size()];
		return out.toArray(output);
	}

	public static double RPNtoDouble(String[] tokens) {
		Stack<String> stack = new Stack<String>();

		
		for (String token : tokens) {
			
			if (!isOperator(token)) {
				stack.push(token);
			} else {
				
				Double d2 = Double.valueOf(stack.pop());
				Double d1 = Double.valueOf(stack.pop());

		

				Double ans = token.compareTo("+") == 0 ? d1 + d2
						: token.compareTo("-") == 0 ? d1 - d2 : token.compareTo("*") == 0 ? d1 * d2 : d1 / d2;

				
				stack.push(String.valueOf(ans));
			}
		}

		return Double.valueOf(stack.pop());
	}

	public static void main(String[] args) {
		double big = 10000000000.0;
		double small = -10000000000.0;
		boolean b= true;;
		Scanner sc = new Scanner(System.in);
		System.out.println(" ! User must input spaces between number and operator, or between operators");
		System.out.println("Start Calculator Application");
		while(b) {
		System.out.print("Input expression: ");
		

		if (sc.hasNext("[a-zA-Z]*")) {
			System.out.println("Invalid expression.");

		}
		else {
			String in = sc.nextLine();
			String[] input = in.split(" ");
			String[] output = infixToRPN(input);
			double result = RPNtoDouble(output);
			if (result > big) {
				System.out.println("too big");
			} else if (result < small) {
				System.out.println("too small");
			} else {
				System.out.println("Result:" + result);
			}

		}

	}
	}

}